AWSTemplateFormatVersion: '2010-09-09'
Description: This template deploys a VPC, EC2 instance and RDS database. The EC2 instance will run a Python script (supplied) that connects to RDS and creates/retrieves a record.

Parameters:
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.8.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.8.10.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.8.20.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.8.30.0/24

  EC2InstanceType:
    Description: Please enter the EC2 instance type
    Type: String
    Default: t2.micro

  RDSInstanceClass:
    Description: Please enter the RDS instance class
    Type: String
    Default: db.t3.micro

  DatabaseName:
    Description: Please enter the Database name
    Type: String
    Default: MyDatabase

  DatabaseUsername:
    Description: Please enter the database username
    Type: String
    NoEcho: true

  DatabasePassword:
    Description: Please enter the database password
    Type: String
    NoEcho: true


Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: VPC Template Challenge

# Internect Gateway section
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: IGW Template Challenge

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

# Subnet section
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet (AZ1) Template Challenge

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet (AZ1) Template Challenge

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet (AZ2) Template Challenge
    
  mydbsubnetgroup: 
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: Subnet group for mySQL Database
      DBSubnetGroupName: myDBSubnetGroup
      SubnetIds: 
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

# Public Route Table Section
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public RT Template Challenge

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

# Private Route Table section
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private RT Template Challenge

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

# Security Group Section 
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: template-challenge-instance-sg
      GroupDescription: temp-chal-public-instance
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
       
  RDSPrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: template-challenge-RDS-sg
      GroupDescription: temp-chal-private-rds
      VpcId: !Ref VPC

  InstanceSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Add inbound rule for RDS
      GroupId: !Ref InstanceSecurityGroup
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !Ref RDSPrivateSecurityGroup
  
  InstanceSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Add outbound rule for RDS
      GroupId: !Ref InstanceSecurityGroup
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      DestinationSecurityGroupId: !Ref RDSPrivateSecurityGroup

  RDSPrivateSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Add inbound rule ffrom public EC2 instance to RDS
      GroupId: !Ref RDSPrivateSecurityGroup
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !Ref InstanceSecurityGroup

 #Instance and RDS Section 
  MyInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-05b10e08d247fb927  # Ensure this AMI ID is valid for your region
      InstanceType: !Ref EC2InstanceType
      SecurityGroupIds:
        - !GetAtt InstanceSecurityGroup.GroupId
      SubnetId: !Ref PublicSubnet1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          sudo yum update -y
          sudo yum install pip -y
          sudo yum install -y python3
          sudo pip3 install flask mysql-connector-python
          cat <<EOF > /home/ec2-user/app.py
          from flask import Flask
          import mysql.connector
          app = Flask(__name__)
          @app.route("/")
          def hello():
              conn = mysql.connector.connect(user='admin', password='secret123', host='${MyDBInstance.Endpoint.Address}', database='MyDatabase')
              cursor = conn.cursor()
              cursor.execute("CREATE TABLE IF NOT EXISTS messages (content VARCHAR(255))")
              cursor.execute("INSERT INTO messages (content) VALUES ('Hello, world!')")
              conn.commit()
              cursor.execute("SELECT content FROM messages")
              row = cursor.fetchone()
              if row is None:
                  return "No messages in database"
              else:
                  return "Message from database: " + row[0]
          if __name__ == "__main__":
              app.run(host='0.0.0.0', port=80)
          EOF
          sudo python3 /home/ec2-user/app.py &
  
  MyDBInstance:
     Type: AWS::RDS::DBInstance
     Properties:
      DBName: !Ref DatabaseName
      DBInstanceClass: !Ref RDSInstanceClass
      Engine: MySQL
      EngineVersion: 8.0.40
      AllocatedStorage: 5
      BackupRetentionPeriod: 0
      MasterUsername: !Ref DatabaseUsername
      MasterUserPassword: !Ref DatabasePassword
      VPCSecurityGroups:
      - !Ref RDSPrivateSecurityGroup
      DBSubnetGroupName: !Ref mydbsubnetgroup